plugin:

  Shougo/neocomplete.vim:
    before: |
      " from readme
      let g:neocomplete#enable_at_startup = 1
      let g:neocomplete#enable_smart_case = 1
      let g:neocomplete#auto_completion_start_length = 2
      let g:neocomplete#sources#syntax#min_keyword_length = 3
      let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
      " Define dictionary.
      let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions',
        \ 'sh' : $HOME.'/.bash_history'
        \ }
      if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
      endif
      if !exists('g:neocomplete#force_omni_input_patterns')
        let g:neocomplete#force_omni_input_patterns = {}
      endif
      let g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
      let g:neocomplete#force_omni_input_patterns.haskell = '[A-Z][a-z]*\.\w*\|import.*'
      let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
      let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
      let g:neocomplete#sources#omni#input_patterns.ruby='[^. *\t]\.\w*\|\h\w*::'
      let g:neocomplete#sources#omni#input_patterns.javascript = '[[:alpha:]./"''$]\+'
      let g:neocomplete#sources#omni#input_patterns.typescript = '[[:alpha:]./"''$]\+'
      let g:neocomplete#sources#omni#input_patterns.haskell = 'import\s\+.*\|[:alpha:]\.\w*'
      if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
      endif
      let g:neocomplete#keyword_patterns['default'] = '\h\w*'
    after: |
      " <CR>: close popup and save indent.
      inoremap <expr><C-l> neocomplete#complete_common_string()
      function! s:my_cr_function()
          return neocomplete#close_popup() . "\<CR>"
          "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
      endfunction
      inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
      inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
      " <C-h>, <BS>: close popup and delete backword char.
      inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
      inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
      inoremap <expr><C-x><C-f> neocomplete#start_manual_complete('file')

  thinca/vim-quickrun:
    before: |
      let g:quickrun_config = {}
      let g:quickrun_config["_"] = {"runner":'vimproc',"runner/vimproc/updatetime" : 40, "hook/dots/enable":1}
      let g:quickrun_config.ox = {'command' : 'autoox.sh'}
      let g:quickrun_config.st = {'command' : 'gst'}
      if executable('ikarus')
          let g:quickrun_config.scheme = {'command' : 'ikarus'}
      elseif executable('guile')
          let g:quickrun_config.scheme = {'command' : 'guile'}
      endif
      let g:quickrun_config['haskell/cabal'] =
          \ {'command' : 'cabal', 'cmdopt' : 'exec runghc'}
      let g:quickrun_config['haskell/stack'] =
          \ {'command' : 'stack', 'cmdopt' : 'runghc'}
      let g:quickrun_config.haskell = {'type': 'haskell/stack'}
      " todo : make local
      function! TempfileWithAlph()
          return substitute(tempname(), '/tmp/[^/]\+/\zs\(.*\)\ze$', 'temp\1','g')
      endfunction
      let g:quickrun_config.coq =
          \ {'command' : 'coqc',
          \ 'hook/sweep/files': ['%S:p:r.glob', '%S:p:r.vo'],
          \ 'tempfile' :
          \ "%{TempfileWithAlph() . '.v'}"
          \ }
      " http://stackoverflow.com/a/26330527/3026489
      let g:quickrun_config['prolog/swipl'] ={
          \ 'command' : 'swipl',
          \ 'exec' : ['%c -g "consult(%s), main, halt."']
          \ }
      let g:quickrun_config.prolog = {'type' : 'prolog/swipl'}
      let g:quickrun_config.clojure = {'runner': 'neoclojure', 'command': 'dummy',
            \ 'tempfile'  : '%{tempname()}.clj'}
    after: |
      command! Q QuickRun

  osyo-manga/vim-anzu:
    after: |
      nmap n <Plug>(anzu-n-with-echo)zv
      nmap N <Plug>(anzu-N-with-echo)zv
      nmap * <Plug>(anzu-star-with-echo)N
      nmap # <Plug>(anzu-sharp-with-echo)


  Yggdroot/indentLine:
    before: |
      let g:indentLine_showFirstIndentLevel=1
      let g:indentLine_first_char = '┆'
          " other candidates : '❯', '║', '⧫',
      let g:indentLine_char = '⟩'
          " other candidates : '❭', '║', '⦙'
      let g:indentLine_color_term=62
      let g:indentLine_color_gui='#aabbdd'
      let g:indentLine_fileType=[]
      let g:indentLine_fileTypeExclude = [
              \ 'text', 'quickrun', 'help', 'quickfix', 'man',
              \ 'w3m', 'clojure',
              \]
      " This is a dirty workaround.
      " It seems something is hiding indentLine
      " when setting ft after opening buffer.
      " :enew
      " :set ft=py
      " (no indent shown)
      " :IndentLinesToggle
      " (no indent shown)
      " :IndentLinesToggle
      " (indent shown)
      function! s:setIndentLine()
          for excludeft in g:indentLine_fileTypeExclude
              if &ft ==# excludeft
                  " execute "IndentLinesDisable"
                  return
              endif
          endfor
          execute "IndentLinesEnable"
          execute "IndentLinesReset"
      endfunction
      augroup IndentLineGroup
          autocmd!
          autocmd Filetype * call s:setIndentLine()
      augroup END

  kien/rainbow_parentheses.vim:
    before: |
      let g:rainbow_off_fts = [
          \ "css", "text", "html", "javascript", "quickrun", "haskell", "lua",
          \ "qf", "agit", "agit_diff", "agit_stat", "diff", "gitcommit", "coq",
          \ "clojure"
          \ ]
    after: |
      function! Config_Rainbow()
          if (index(g:rainbow_off_fts, &l:filetype) == -1)
              call rainbow_parentheses#load(0)
              call rainbow_parentheses#load(1)
              call rainbow_parentheses#load(2)
          endif
      endfunction

      function! Load_Rainbow()
          if (index(g:rainbow_off_fts, &l:filetype) == -1)
              call rainbow_parentheses#activate()
          endif
      endfunction

      augroup TastetheRainbow
          autocmd!
          autocmd Syntax * call Config_Rainbow()
          autocmd VimEnter,BufRead,BufWinEnter,BufNewFile * call Load_Rainbow()
      augroup END

  tpope/vim-characterize: {}

  tpope/vim-surround: {}

  tpope/vim-repeat: {}

  t9md/vim-quickhl:
    after: |
      nmap <Space>m <Plug>(quickhl-manual-this)
      xmap <Space>m <Plug>(quickhl-manual-this)
      nmap <Space>M <Plug>(quickhl-manual-reset)
      xmap <Space>M <Plug>(quickhl-manual-reset)
      nmap <Space>J <Plug>(quickhl-cword-toggle)

  cohama/agit.vim:
    command:
      - Agit
      - AgitFile

  nanotech/jellybeans.vim: {}



  majutsushi/tagbar:
    command: Tagbar
    before: |
      let g:tagbar_type_haskell = {
          \ 'ctagsbin'  : 'hasktags',
          \ 'ctagsargs' : '-x -c -o-',
          \ 'kinds'     : [
              \  'm:modules:0:1',
              \  'd:data: 0:1',
              \  'd_gadt: data gadt:0:1',
              \  't:type names:0:1',
              \  'nt:new types:0:1',
              \  'c:classes:0:1',
              \  'cons:constructors:1:1',
              \  'c_gadt:constructor gadt:1:1',
              \  'c_a:constructor accessors:1:1',
              \  'ft:function types:1:1',
              \  'fi:function implementations:0:1',
              \  'o:others:0:1'
          \ ],
          \ 'sro'        : '.',
          \ 'kind2scope' : {
              \ 'm' : 'module',
              \ 'c' : 'class',
              \ 'd' : 'data',
              \ 't' : 'type'
          \ },
          \ 'scope2kind' : {
              \ 'module' : 'm',
              \ 'class'  : 'c',
              \ 'data'   : 'd',
              \ 'type'   : 't'
          \ }
      \ }
      let g:tagbar_sort = 0
      let g:tagbar_show_linenumers=0
      let g:tagbar_compact = 1
      let g:tagbar_iconchars = ['▸', '▾']

  ujihisa/neco-ghc:
    filetype: haskell
    before: |
      let g:necoghc_enable_detailed_browse=1

  itchyny/vim-haskell-indent:
    filetype: haskell

  parsonsmatt/vim2hs:
    filetype: haskell
    dependon: haskell-indent
    before: |
      let g:haskell_conceal_enumerations=0
      let g:haskell_conceal_wide=0
      let g:haskell_fold = 0

  eagletmt/ghcmod-vim:
    filetype: haskell
    dependon: vimproc
    after: |
      autocmd filetype haskell nnoremap <buffer> <Space>t :<C-u>GhcModType<CR>
      autocmd filetype haskell vnoremap <buffer> <Space>t :<C-u>GhcModType<CR>
      autocmd filetype haskell nnoremap <buffer> <Space>i :<C-u>GhcModInfoPreview<CR>
      autocmd filetype haskell vnoremap <buffer> <Space>i :<C-u>GhcModInfoPreview<CR>
      autocmd filetype haskell nnoremap <buffer><silent> <Space>T :<C-u>GhcModTypeClear<CR>
      autocmd filetype haskell nnoremap <buffer> <Space>q :<C-u>GhcModCheckAndLintAsync<CR>
  ujihisa/ref-hoogle:
    filetype: haskell



  hynek/vim-python-pep8-indent:
    filetype: python

  davidhalter/jedi-vim:
    filetype: python
    before: |
      let g:jedi#auto_initialization = 1
      let g:jedi#popup_on_dot = 0
      let g:jedi#show_call_signatures = 0
      let g:jedi#completions_enabled = 1
      let g:jedi#show_call_signatures = 0
      augroup jedigroup
          autocmd!
          autocmd FileType python let b:did_ftplugin = 1
      augroup END
      let g:jedi#auto_vim_configuration=0
      let g:jedi#rename_command = ""
      " <K> conflicts with vim-ref.
      let g:jedi#documentation_command = "<Leader>K"
      let g:jedi#force_py_version = 3

  tmhedberg/SimpylFold:
    filetype: python


  thinca/vim-ft-clojure:
    filetype: clojure

  ujihisa/neoclojure.vim:
    filetype: clojure

  rust-lang/rust.vim:
    filetype: rust

  racer-rust/vim-racer:
    filetype: rust
    before: |
      let g:racer_cmd="racer"

  osyo-manga/vim-monster:
    filetype: ruby

  othree/html5.vim:
    filetype:
      - html
      - css

  mattn/emmet-vim:
    before: |
      let g:user_emmet_settings = {
      \  'markdown' : {
      \      'indentation' : '  ',
      \      'snippets' : {
      \          'syn' : "{% highlight | %}\n|\n{% endhighlight %}",
      \       },
      \   },
      \ }
    filetype:
      - html
      - css
      - markdown

  JulesWang/css.vim:
    filetype: css

  jelera/vim-javascript-syntax:
    filetype:
      - javascript
      - html

  pangloss/vim-javascript:
    filetype:
      - javascript
      - html

  ternjs/tern_for_vim:
    filetype: javascript

  Shutnik/jshint2.vim:
    filetype: javascript

  leafgarland/typescript-vim:
    filetype: typescript

  Quramy/tsuquyomi:
    filetype: typescript
    before: |
      let g:tsuquyomi_disable_quickfix=1

  octol/vim-cpp-enhanced-highlight:
    filetype: cpp

  osyo-manga/vim-marching:
    filetype: cpp
    before: |
      let g:marching_enable_neocomplete = 1
      let g:marching#clang_command#options = { "cpp" : "-std=gnu++1y" }


  jvoorhis/coq.vim: {}

  vim-scripts/CoqIDE:
    filetype: coq

  lesguillemets/coqtop-vim:
    command: CoqStart
    filetype: coq

  lervag/vimtex:
    filetype:
      - tex
      - latex
      - plaintex

  vim-jp/vim-go-extra:
    filetype: go

  gabrielelana/vim-markdown:
    filetype: markdown
    before: |
      let g:markdown_include_jekyll_support = 1
      let g:markdown_enable_mappings = 0

  loremipsum:
    command:
      - Loremipsum
      - Loreplace

  scrooloose/nerdtree:
    command: NERDTree
    before: |
      let g:NERDTreeShowHidden=1

  deris/columnjump:
    after: |
      nmap <C-k> ^<Plug>(columnjump-backward)
      nmap <C-j> ^<Plug>(columnjump-forward)

  tyru/caw.vim:
    after: |
      nmap <Leader>c <Plug>(caw:zeropos:toggle)
      vmap <Leader>c <Plug>(caw:zeropos:toggle)

  thinca/vim-ref:
    before: |
      let g:ref_pydoc_cmd = "pydoc3"
      if !exists("g:ref_detect_filetype")
          let g:ref_detect_filetype = {}
      endif
      let g:ref_detect_filetype.sh = "man"

  osyo-manga/vim-hideout:
    command: HideoutOn

  motemen/git-vim:
    before: |
      let g:git_no_map_default=1

  rhysd/committia.vim:
    before: |
      let g:committia_hooks = {}
      let g:committia_min_window_width = 100
      function! g:committia_hooks.edit_open(e)
          setlocal spell
      endfunction
      function! g:committia_hooks.diff_open(e)
          setlocal nofoldenable
      endfunction

  kana/vim-textobj-user: {}

  kana/vim-textobj-indent:
    dependon: vim-textobj-user

  h1mesuke/textobj-wiw:
    dependon: vim-textobj-user
    mapmode:
      - v
      - o
    mapping:
      - a,w
      - i,w

  rhysd/vim-textobj-word-column:
    dependon: vim-textobj-user

  thinca/vim-textobj-between:
    dependon: vim-textobj-user
    before: |
      let g:textobj_between_no_default_key_mappings=1
        xmap ab <Plug>(textobj-between-a)
        omap ab <Plug>(textobj-between-a)
        xmap ib <Plug>(textobj-between-i)
        omap ib <Plug>(textobj-between-i)
    after : |

  reedes/vim-textobj-quote:
    dependon: vim-textobj-user

  tyru/capture.vim:
    command: Capture

  rking/ag.vim:
    command: Ag

  kshenoy/vim-signature: {}

  thinca/vim-qfreplace: {}
  # http://blog.supermomonga.com/articles/vim/qfreplace-benri.html

  osyo-manga/vim-watchdogs:
    dependon:
      - quickrun
      - shabadou
    command: WatchdogsRun
    script: |
      augroup WatchDogs
        autocmd FileType c,cpp,vim,python,ruby,perl,sh,go,typescript,rust nnoremap <buffer> <Space>q :<C-u>WatchdogsRun<CR>
      augroup END
    after: |
      call quickrun#module#register(shabadou#make_quickrun_hook_anim( 'dots', ['.','..','...','....','.....'], 10,),1)
      let g:quickrun_config["watchdogs_checker/_"] = {"runner/vimproc/updatetime" : 40, "hook/dots/enable":1,
      \ "hook/echo/enable":1, "hook/echo/output_success": "> No Errors Found."}
      let g:quickrun_config["watchdogs_checker/pyflakes3"] = {"command": "pyflakes3", "exec" : '%c %o %s:p', "errorformat": '%f:%l:%m'}
      let g:quickrun_config["python/watchdogs_checker"] = { "type" : "watchdogs_checker/pyflakes3" }
      let g:quickrun_config["watchdogs_checker/shellcheck"] = {"command" : "shellcheck", "cmdopt" : "-f gcc"}
      let g:quickrun_config["sh/watchdogs_checker"] = {"type" : "watchdogs_checker/shellcheck"}
      let g:quickrun_config["watchdogs_checker/rustc"] = {"command" : "rustc", "cmdopt": '--out-dir /tmp', "exec": '%c %o %s:p', "outputter": 'quickfix',
        \ "errorformat" :
        \ '%E%f:%l:%c: %\d%#:%\d%# %.%\{-}error:%.%\{-} %m,'   .
        \ '%W%f:%l:%c: %\d%#:%\d%# %.%\{-}warning:%.%\{-} %m,' .
        \ '%C%f:%l %m' .
        \ ',' .
        \ '%-G,' .
        \ '%-Gerror: aborting %.%#,' .
        \ '%-Gerror: Could not compile %.%#,' .
        \ '%Eerror: %m,' .
        \ '%Eerror[E%n]: %m,' .
        \ '%-Gwarning: the option `Z` is unstable %.%#,' .
        \ '%Wwarning: %m,' .
        \ '%Inote: %m,' .
        \ '%C %#--> %f:%l:%c' }
      let g:quickrun_config["rust/watchdogs_checker"] = {"type" : "watchdogs_checker/rustc"}
      call watchdogs#setup(g:quickrun_config)


  osyo-manga/shabadou.vim:
    loadbefore: watchdogs

  jceb/vim-hier:
    command:
      - WatchdogsRun
      - GhcModCheckAndLintAsync

  easymotion/vim-easymotion:
    before: |
      let g:EasyMotion_smartcase = 1
      let g:EasyMotion_startofline = 0
    after: |
      nmap s <Plug>(easymotion-s2)
      vmap s <Plug>(easymotion-s2)
      omap <Leader>s <Plug>(easymotion-s2)
      map <Leader>j <Plug>(easymotion-j)
      map <Leader>k <Plug>(easymotion-k)
      map <Leader>h <Plug>(easymotion-linebackward)
      map <Leader>l <Plug>(easymotion-lineforward)
      map <Space>j <Plug>(easymotion-j)
      map <Space>k <Plug>(easymotion-k)
      map <Space>h <Plug>(easymotion-linebackward)
      map <Space>l <Plug>(easymotion-lineforward)
      map <Leader>w <Plug>(easymotion-bd-wl)
      map <Leader>e <Plug>(easymotion-bd-el)
      augroup VemSettings
          autocmd!
          autocmd ColorScheme * hi EasyMotionTargetMine cterm=bold ctermfg=blue gui=bold guifg=#0044ff
      augroup END
      hi link EasyMotionTarget EasyMotionTargetMine

  haya14busa/incsearch.vim:
    after: |
      map / <Plug>(incsearch-forward)
      map ? <Plug>(incsearch-backward)
      map g/ <Plug>(incsearch-stay)

  guns/xterm-color-table.vim:
    command: XtermColorTable

  lilydjwg/colorizer:
    command:
      - ColorHighlight
      - ColorToggle
    filetype:
      - css
      - html
      - javascript
      - vim

  lyokha/vim-publish-helper:
    command:
      - MakeHtmlCodeHighlight
      - MakeTexCodeHighlight

  reedes/vim-wordy: {}

  reedes/vim-pencil:
    command:
      - SoftPencil
      - HardPencil
      - TogglePencil

  sjl/gundo.vim:
    before: |
      let g:gundo_prefer_python3 = 1
    after: |
      nnoremap <silent> <Space>u :GundoToggle<CR>

  mattn/benchvimrc-vim:
    command: BenchVimrc

  junegunn/goyo.vim:
    command: Goyo

  tyru/open-browser.vim:
    after:
      nmap <leader>b <Plug>(openbrowser-smart-search)
      vmap <leader>b <Plug>(openbrowser-smart-search)

  mhinz/vim-signify:
    before: |
      let g:signify_vcs_list = ['git', 'hg']

  rhysd/git-messenger.vim:
    command:
      - GitMessengerToggle
      - GitMessengerBalloonToggle

  h1mesuke/vim-alignta: {}

  lesguillemets/ft-grass.vim: {}

  AndrewRadev/gapply.vim:
    command: Gapply

  ctrlpvim/ctrlp.vim:
    before: |
      if executable('files')
          let g:ctrlp_user_command = 'files -i="^(\\.git|\\.hg|\\.svn|\\.stack-work|\\.cabal-sandbox)$" -a %s '
      endif
      let g:ctrlp_follow_symlinks=2
      let g:ctrlp_switch_buffer='Et'
      let g:ctrlp_custom_ignore = {}
      let g:ctrlp_custom_ignore.file = '\v\.(hi|o|out|jsmod|vo|v\.d|glob|pyc)$'
      let g:ctrlp_custom_ignore.dir = '\v[\/]\.(git|hg|svn|stack-work)$'
      if !exists('g:ctrlp_extensions')
          let g:ctrlp_extensions = []
      endif

  mattn/ctrlp-register:
    dependon: ctrlp.vim
    before: |
      let g:ctrlp_extensions+=['register']
    after: |
      nnoremap <Leader>r :<C-u>CtrlPRegister<CR>

  mattn/ctrlp-mark:
    before: |
      let g:ctrlp_extensions+=['mark']
    after: |
      nnoremap <Leader>m :<C-u>CtrlPMark<CR>

  KabbAmine/vullScreen.vim:
    command: VullScreen

  lesguillemets/rainfall-vim-hs:
    command: RainfallStart

  deris/vim-duzzle:
    command: DuzzleStart

  thinca/vim-threes:
    command: ThreesStart

  Shougo/vimproc:
    build: make
    function: vimproc
    loadbefore:
      - ghcmod
      - quickrun

  katono/rogue.vim:
    command:
      - Rogue
      - RogueRestore

  junegunn/seoul256.vim: {}

  thomd/vim-wasabi-colorscheme: {}

  romainl/Apprentice: {}

  reedes/vim-colors-pencil: {}

  Pychimp/vim-luna: {}

  mdlerch/vim-tungsten: {}

  w0ng/vim-hybrid:
    after: |
      colorscheme hybrid

  kbenzie/vim-fresh: {}

  xero/sourcerer.vim: {}

  KKPMW/moonshine-vim: {}

  JcDelay/vim-frictionless: {}

  freeo/vim-kalisi: {}

  igungor/schellar : {}

  jacoborus/tender.vim:
    command: LoadColors

  ataraxer/sapphire256.vim:
    command: LoadColors

  sk1418/last256:
    command: LoadColors

  john2x/flatui.vim:
    command: LoadColors

  csexton/spacemanspiff.vim:
    command: LoadColors

  atelierbram/vim-colors_atelier-schemes:
    command: LoadColors

  cocopon/iceberg.vim:
    command: LoadColors

  kiudee/greymeans:
    command: LoadColors

  hail2u/h2u_colorscheme:
    command: LoadColors

  MaxSt/FlatColor:
    command: LoadColors

  vaibhav276/lego-vim-colorscheme:
    command: LoadColors

  dbb/vim-gummybears-colorscheme:
    command: LoadColors

  TaurusOlson/darkburn.vim:
    command: LoadColors

  arnau/teaspoon.vim:
    command: LoadColors

  svjunic/RadicalGoodSpeed.vim:
    command: LoadColors

  candy.vim:
    command: LoadColors

  morhetz/gruvbox:
    command: LoadColors

  peaksea:
    command: LoadColors

  tylerball/vim-hypertint:
    command: LoadColors

  miyakogi/slateblue.vim:
    command: LoadColors

  bronzehedwick/impactjs-colorscheme:
    command: LoadColors

  beardedprojamz/vim-colors-blayden:
    command: LoadColors

  khaki.vim:
    command: LoadColors

  tabula.vim:
    command: LoadColors

  leo256:
    command: LoadColors

  ftzeng/futora:
    command: LoadColors

  octol/vombatidae-vim:
    command: LoadColors

  xenomachina/vim-holodark:
    command: LoadColors

  Risto-Color-Scheme:
    command: LoadColors

  rdark-terminal:
    command: LoadColors

  Pychimp/vim-sol:
    command: LoadColors

  xironix/zarniwoop.vim:
    command: LoadColors

  JohnnyMudcrab/vim-mudcrab:
    command: LoadColors

  wolf-dog/sceaduhelm.vim:
    command: LoadColors

  jordwalke/flatlandia:
    command: LoadColors

  romainl/Disciple:
    command: LoadColors

  philananin/seastone.vim:
    command: LoadColors

  gryftir/gryffin:
    command: LoadColors

  chriskempson/base16-vim:
    command: LoadColors

  mgutz/vim-colors:
    command: LoadColors

  toupeira/vim-desertink:
    command: LoadColors

  endel/vim-github-colorscheme:
    command: LoadColors

  xoria256.vim:
    command: LoadColors

  mne/as_xoria.vim:
    command: LoadColors

  hhubbell/vim-hubs:
    command: LoadColors

  ChrisKempson/Vim-Tomorrow-Theme:
    command: LoadColors

  dstrunk/atom-dark-vim:
    command: LoadColors

  twerth/ir_black:
    command: LoadColors

  scheakur/vim-scheakur:
    command: LoadColors

  AlxHnr/clear_colors:
    command: LoadColors

  guns/jellyx.vim:
    command: LoadColors

  alem0lars/vim-colorscheme-darcula:
    command: LoadColors

  https://bitbucket.org/kb/vim-colorscheme-krxt.git:
    command: LoadColors

  fisadev/fisa-vim-colorscheme:
    command: LoadColors

  qwelyt/TrippingRobot:
    command: LoadColors

  petobens/heraldish:
    command: LoadColors

  MichaelMalick/vim-colors-bluedrake:
    command: LoadColors

  YorickPeterse/happy_hacking.vim:
    command: LoadColors

  mhinz/vim-janah:
    command: LoadColors

  crusoexia/vim-dream:
    command: LoadColors

  crusoexia/vim-dracula:
    command: LoadColors

  micha/vim70style:
    command: LoadColors

  CruizeMissile/Revolution.vim:
    command: LoadColors

  hellabyte/lichen:
    command: LoadColors

  aliou/moriarty.vim:
    command: LoadColors

  asafonov/metropolis-vim:
    command: LoadColors

  thmsaurel/beargeektheme:
    command: LoadColors

  rivayama/twiga.vim:
    command: LoadColors

  RyanPattison/ghibli256:
    command: LoadColors

  rafcamlet/shadowmoth:
    command: LoadColors

  christophermca/meta5:
    command: LoadColors

  flaflasun/vim-nightowl:
    command: LoadColors

  kh3phr3n/today-theme:
    command: LoadColors

  thinkpixellab/flatland:
    command: LoadColors

  Dru89/vim-adventurous:
    command: LoadColors

  centaurialpha/gabo-vim-colorscheme:
    command: LoadColors

  queyenth/oxeded.vim:
    command: LoadColors

  NLKNguyen/papercolor-theme:
    command: LoadColors

  henrybw/vim-colors-aurora:
    command: LoadColors

  lisposter/vim-blackboard:
    command: LoadColors

  kristijanhusak/vim-hybrid-material:
    command: LoadColors

  mtglsk/mushroom:
    command: LoadColors

  MakeNowJust/islenauts.vim:
    command: LoadColors

  thecodesmith/vim-colorscheme-codesmith:
    command: LoadColors

  idling-mind/vim-color-subtle:
    command: LoadColors

  rhysd/vim-color-splatoon:
    command: LoadColors

  geoffharcourt/one-dark.vim:
    command: LoadColors

  dylanaraps/crayon-theme:
    command: LoadColors

  evgenyzinoviev/vim-vendetta:
    command: LoadColors

  gilgigilgil/anderson.vim:
    command: LoadColors

  iplog/vim-popsicles:
    command: LoadColors

  mbrand12/vim-citizen256:
    command: LoadColors

  zeis/vim-kolor:
    command: LoadColors

  KabbAmine/yowish.vim:
    command: LoadColors

  Haron-Prime/Antares:
    command: LoadColors

  DrSpatula/vim-buddy:
    command: LoadColors

  mdlerch/yttrium.vim:
    command: LoadColors

  smemsh/vim-smemsh256:
    command: LoadColors

  Donearm/Laederon:
    command: LoadColors

  minoue/untitledColor:
    command: LoadColors

  AlessandroYorba/Alduin:
    command: LoadColors

  bronzdoc/samurai:
    command: LoadColors

  rakr/vim-colors-rakr:
    command: LoadColors

  baskerville/bubblegum:
    command: LoadColors

  AlessandroYorba/Sierra:
    command: LoadColors

  benburwell/vim-colorscheme-benji:
    command: LoadColors

  taniarascia/new-moon.vim:
    command: LoadColors

  chyxwzn/skittles_berry.vim:
    command: LoadColors

  tstelzer/welpe.vim:
    command: LoadColors

  jacoborus/tender:
    command: LoadColors

  jeetsukumaran/vim-nefertiti:
    command: LoadColors

  noahfrederick/vim-hemisu:
    command: LoadColors

  tyrannicaltoucan/vim-deep-space:
    command: LoadColors

  osyo-manga/vim-sound: {}


filetype:
  clojure: |
    setlocal omnifunc=neoclojure#complete#omni_auto
  haskell: |
    setlocal omnifunc=necoghc#omnifunc
  python: |
    setlocal omnifunc=jedi#completions
  text: |
    NeoCompleteLock
  quickrun: |
    NeoCompleteLock
  help: |
    NeoCompleteLock
  css: |
    setlocal omnifunc=csscomplete#CompleteCSS
  html: |
    setlocal omnifunc=htmlcomplete#CompleteTags
  markdown: |
    setlocal omnifunc=htmlcomplete#CompleteTags
  javascript: |
    setlocal omnifunc=tern#Complete
  xml: |
    setlocal omnifunc=xmlcomplete#CompleteTags

# vim: set expandtab ts=2 sw=2 sts=2:

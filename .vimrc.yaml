plugin:

  Shougo/deoplete.nvim:
    dependon:
      - roxma/nvim-yarp
      - roxma/vim-hug-neovim-rpc
    before: |
      let g:deoplete#enable_at_startup=1
      let g:deoplete#enable_smart_case=1
      let g:deoplete#auto_completion_start_length = 2
      let g:deoplete#max_menu_width = 0
    after: |
      set completeopt-=preview
      inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space()
         \  ? "\<TAB>" : deoplete#mappings#manual_complete()
      function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
      endfunction
      inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
      inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"
      call deoplete#custom#var('omni', 'input_patterns', {
        \ 'haskell' : '[A-Z][a-z]*\.\w*\|import.*',
        \ 'python' : '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*',
        \ 'cpp' :  '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::',
        \ } )

  roxma/nvim-yarp:
    dependedby:
      - Shougo/deoplete.nvim
  roxma/vim-hug-neovim-rpc:
    dependedby:
      - Shougo/deoplete.nvim

  # autozimu/LanguageClient-neovim:
  #   build: bash install.sh
  #   dependon:
  #     Shougo/deoplete.nvim
  #   filetype: {}
  #   before: |
  #     let g:LanguageClient_diagnosticsEnable = 0
  #     let g:LanguageClient_hasSnippetSupport = 0
  #     let g:LanguageClient_serverCommands = { }

  w0rp/ale:
    filetype:
      - rust
      - bash
      - sh
      - c
      - cpp
      - clojure
      - javascript
      - python
      - ruby
    before: |
      let g:ale_rust_cargo_use_clippy = executable('cargo-clippy')
      let g:ale_lint_on_enter = 0
      let g:ale_lint_on_filetype_changed = 0
      let g:ale_lint_on_text_changed = 'never'
      let g:ale_lint_on_save = 0
      let g:ale_open_list = 1
      let g:ale_set_highlights = 0
      let g:ale_set_loclist=0
      let g:ale_set_quickfix=1
      let g:ale_linters = {}
      " try out hie "
      " let g:ale_linters.haskell = ['hie'] "
    after: |
      function! s:lintreportifnone() abort
        echom "called"
        if ale#statusline#Count('%').total == 0
          echom "no error found."
        endif
      endfunction
      nmap <Space>q <Plug>(ale_lint)
      augroup ALERelated
        autocmd!
        autocmd User ALELintPre let b:ale_running=1 | call lightline#update()
        autocmd User ALELintPost let b:ale_running=0 | call lightline#update()
        autocmd User ALELintPost call s:lintreportifnone()
      augroup END

  eagletmt/neco-ghc:
    filetype: haskell
    before: |
      let g:necoghc_enable_detailed_browse = 1
    after: |
      autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

  racer-rust/vim-racer:
    filetype: rust
    before: |
      let g:racer_experimental_completer = 1

  rust-lang/rust.vim:
    filetype: rust
    before: |
      let g:rustfmt_autosave=1

  itchyny/vim-haskell-indent:
    filetype: haskell

  eagletmt/ghcmod-vim:
    filetype: haskell
    dependon: vimproc
    after: |
      autocmd filetype haskell nnoremap <buffer> <Space>t :<C-u>GhcModType<CR>
      autocmd filetype haskell vnoremap <buffer> <Space>t :<C-u>GhcModType<CR>
      autocmd filetype haskell nnoremap <buffer> <Space>i :<C-u>GhcModInfoPreview<CR>
      autocmd filetype haskell vnoremap <buffer> <Space>i :<C-u>GhcModInfoPreview<CR>
      autocmd filetype haskell nnoremap <buffer><silent> <Space>T :<C-u>GhcModTypeClear<CR>
      autocmd filetype haskell nnoremap <buffer><silent> <Space>q :<C-u>GhcModCheckAndLintAsync<CR>

  mattn/emmet-vim:
    filetype:
      - html
      - css

  othree/html5.vim:
    filetype:
      - html
      - css

  pangloss/vim-javascript:
    filetype:
      - javascript

  leafgarland/typescript-vim:
    filetype:
      - typescript

  Quramy/tsuquyomi:
    filetype:
      - typescript

  elzr/vim-json:
    before: |
      let g:vim_json_syntax_conceal = 0
    filetype:
      - json

  lilydjwg/colorizer:
    command:
      - ColorHighlight
      - ColorToggle
    filetype:
      - css
      - html
      - javascript
      - vim

  Shougo/vimproc:
    build: make
    dependedby:
      - eagletmt/ghcmod-vim

  thinca/vim-quickrun:
    command: QuickRun
    before: |
      let g:quickrun_no_default_key_mappings=1
      let g:quickrun_config = {}
      let g:quickrun_config["_"] = {"runner":'job', "hook/dots/enable":1}
      if executable('ikarus')
          let g:quickrun_config.scheme = {'command' : 'ikarus'}
      elseif executable('guile')
          let g:quickrun_config.scheme = {'command' : 'guile'}
      endif
      let g:quickrun_config['haskell/cabal'] =
          \ {'command' : 'cabal', 'cmdopt' : 'exec runghc'}
      let g:quickrun_config['haskell/stack'] =
          \ {'command' : 'stack', 'cmdopt' : 'runghc'}
      let g:quickrun_config.haskell = {'type': 'haskell/stack'}
    after: |
      command! Q QuickRun

  osyo-manga/vim-anzu:
    after: |
      nmap n <Plug>(anzu-n-with-echo)zv
      nmap N <Plug>(anzu-N-with-echo)zv
      nmap * <Plug>(anzu-star-with-echo)N
      nmap # <Plug>(anzu-sharp-with-echo)

  Yggdroot/indentLine:
    before: |
      let g:indentLine_faster = 1
      let g:indentLine_char = '▏'
      let g:indentLine_showFirstIndentLevel = 1
      let g:indentLine_first_char = "▍"
      let g:indentLine_bufTypeExclude = ["help", "terminal"]

  easymotion/vim-easymotion:
    before: |
      let g:EasyMotion_smartcase = 1
      let g:EasyMotion_startofline = 0
    after: |
      nmap <Leader>s <Plug>(easymotion-s2)
      vmap <Leader>s <Plug>(easymotion-s2)
      omap <Leader>s <Plug>(easymotion-s2)
      nmap <Space>s <Plug>(easymotion-s2)
      vmap <Space>s <Plug>(easymotion-s2)
      omap <Space>s <Plug>(easymotion-s2)
      map <Space>j <Plug>(easymotion-j)
      map <Space>k <Plug>(easymotion-k)
      map <Space>h <Plug>(easymotion-linebackward)
      map <Space>l <Plug>(easymotion-lineforward)
      map <Space>w <Plug>(easymotion-bd-wl)
      map <Space>e <Plug>(easymotion-bd-el)
      augroup VemSettings
          autocmd!
          autocmd ColorScheme * hi EasyMotionTargetMine cterm=bold ctermfg=blue gui=bold guifg=#0044ff
      augroup END
      hi link EasyMotionTarget EasyMotionTargetMine


  kshenoy/vim-signature:
    before: |
      let g:SignatureMap = ""

  majutsushi/tagbar:
    command:
      - TagbarToggle

  itchyny/lightline.vim:
    before: |
      let g:lightline = {}
      let g:lightline.colorscheme = 'jellybeans'
      let g:lightline.active = {}
      let g:lightline.active.left = [
        \ ['mode', 'paste'],
        \ ['relativepath',  'modified', 'myFiletype', 'gitbranch', 'curdir'],
        \ [ 'bufnum']
        \ ]
      let g:lightline.active.right = [
        \ [ 'myLineInfo' ],
        \ [ 'percent' ],
        \ [ 'aleRunning', 'fileencoding' ],
        \ ]
      let g:lightline.inactive = {}
      let g:lightline.inactive.left = [  ['filename', 'modified'] ]
      let g:lightline.component = { 'bufnum': '%([%n]%)',
        \ 'myFiletype': '%{&ft}',
        \ 'myLineInfo' :  '%03l/%03L:%-2v',
        \ 'curdir' : "%<%{fnamemodify(getcwd(),':~')}",
        \ }
      let g:lightline.component_type = { 'bufnum': 'raw', 'gitbranch': 'raw' , 'myFiletype': 'raw'}
      let g:lightline.component_visible_condition = {
        \ 'myFiletype': '&ft !=# ""',
        \ 'aleRunning': 'get(b:, "ale_running", 0)' }
      function! Ale_show_status()
        if get(b:, "ale_running", 0)
          return "linting"
        else
          return ""
        endif
      endfunction
      let g:lightline.component_function = {
        \ 'gitbranch' : 'gitbranch#name' }
      let g:lightline.component_expand = {
        \ 'aleRunning': 'Ale_show_status'
        \ }
      let g:lightline.component_type = {'aleRunning': 'left'}
      let g:lightline.mode_map = {
        \ 'n' : 'N',  'i' : 'I',  'R' : 'R',  'v' : 'v', 'V' : 'V',
        \ "\<C-v>": 'V-B', 'c' : 'C', 's' : 'S', 'S' : 'S-l',
        \ "\<C-s>": 'S-B', 't': 'TERMINAL' }
  itchyny/vim-gitbranch:
    dependedby: itchyny/lightline.vim

  ctrlpvim/ctrlp.vim:
    before: |
      if executable('files')
          let g:ctrlp_user_command = 'files -i="^(target|\\.git|\\.hg|\\.svn|\\.stack-work|\\.cabal-sandbox|\\..*\.sw.)$" -a %s '
      endif
      let g:ctrlp_follow_symlinks=2
      let g:ctrlp_switch_buffer='Et'
      let g:ctrlp_custom_ignore = {}
      let g:ctrlp_custom_ignore.file = '\v\.(hi|o|out|jsmod|vo|v\.d|glob|pyc)$'
      let g:ctrlp_custom_ignore.dir = '\v[\/]\.(git|hg|svn|stack-work|target)$'
      if !exists('g:ctrlp_extensions')
          let g:ctrlp_extensions = []
      endif

  mattn/ctrlp-register:
    dependon: ctrlpvim/ctrlp.vim
    before: |
      let g:ctrlp_extensions+=['register']
    command: CtrlPRegister
    script: |
      nnoremap <Leader><C-r> :<C-u>CtrlPRegister<CR>

  mattn/ctrlp-mark:
    dependon: ctrlpvim/ctrlp.vim
    before: |
      let g:ctrlp_extensions+=['mark']
    command: CtrlPMark
    script: |
      nnoremap <Leader>m :<C-u>CtrlPMark<CR

  tyru/capture.vim:
    command: Capture

  tyru/caw.vim:
    dependon: kana/vim-repeat
    after: |
      nmap <Leader>c <Plug>(caw:hatpos:toggle)
      vmap <Leader>c <Plug>(caw:hatpos:toggle)

  h1mesuke/vim-alignta:
    command:
      - Align

  kana/vim-textobj-user: {}

  thinca/vim-textobj-between:
    dependon: kana/vim-textobj-user
    mapmode:
      - o
      - v
    mapping:
      - af
      - <Plug>(textobj-between-a)
      - if
      - <Plug>(textobj-between-i)
  kana/vim-textobj-indent:
    dependon: kana/vim-textobj-user
    mapmode:
      - o
      - v
    mapping:
      - <Plug>(textobj-indent-a)
      - ai
      - <Plug>(textobj-indent-i)
      - ii
      - <Plug>(textobj-indent-same-a)
      - aI
      - <Plug>(textobj-indent-same-i)
      - iI
  sgur/vim-textobj-parameter:
    dependon: kana/vim-textobj-user
    before: |
      let g:vim_textobj_parameter_mapping = '.'
    mapmode:
      - o
      - v
    mapping:
      - i.
      - a.
  h1mesuke/textobj-wiw:
    dependon: kana/vim-textobj-user
    mapmode:
      - o
      - v
    mapping:
      - a,w
      - i,w

  kana/vim-operator-user:
    dependedby:
      - rhysd/vim-operator-surround

  rhysd/vim-operator-surround:
    dependon: kana/vim-operator-user
    after: |
      map <silent>sa <Plug>(operator-surround-append)
      map <silent>sd <Plug>(operator-surround-delete)
      map <silent>sr <Plug>(operator-surround-replace)
      map <silent>ds <Plug>(operator-surround-delete)a

  kana/vim-repeat: {}

  cohama/lexima.vim:
    filetype:
      - c
      - clojure
      - cpp
      - javascript
      - latex
      - lisp
      - rust
      - tex
      - typescript

  mhinz/vim-signify: {}

  tpope/vim-characterize:
    mapping:
      - <Plug>(characterize)
      - ga

  rhysd/committia.vim:
    before: |
      let g:committia_min_window_width = 120

  cohama/agit.vim:
    command:
      - Agit
      - AgitFile

  w0ng/vim-hybrid:
    before: |
      let g:hybrid_custom_term_colors=1

  luochen1990/rainbow:
    before: |
      let g:rainbow_active = 1
      let g:rainbow_conf = {
      \ 'separately': {}
      \ }
      for ft in [
          \ "css", "text", "html", "javascript", "quickrun", "lua", "help",
          \ "qf", "agit", "agit_diff", "agit_stat", "diff", "gitcommit", "coq",
          \ "clojure"
          \ ]
        let g:rainbow_conf.separately[ft] = 0
      endfor

  t9md/vim-quickhl:
    after: |
      nmap <Space>m <Plug>(quickhl-manual-this)
      xmap <Space>m <Plug>(quickhl-manual-this)
      nmap <Space>M <Plug>(quickhl-manual-reset)
      xmap <Space>M <Plug>(quickhl-manual-reset)
      nmap <Leader>j <Plug>(quickhl-cword-toggle)

  nanotech/jellybeans.vim:
    after: |
      colorscheme jellybeans
      hi Normal guibg=NONE
      hi NonText guibg=NONE

  wincent/terminus:
    before: |
      let g:TerminusMouse=0
      let g:TerminusFocusReporting=0
      let g:TerminusBracketedPaste=0

after: |
  nnoremap <silent> s <Nop>
  autocmd filetype haskell setlocal cpoptions+=M

filetype:
  haskell: |
    inoremap <buffer> <C-l> <space>-> 
    setlocal colorcolumn=79 shiftround nojoinspaces
  rust: |
    inoremap <buffer> <C-l> <space>-> 

# vim: set expandtab ts=2 sw=2 sts=2:
